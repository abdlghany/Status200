const express = require('express');
const app = express();
const cors = require('cors');
const db = require('databaseConnection'); 
const bodyParser = require('body-parser');

const corsOptions = {
    origin: 'http://atm.local', 
    optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(bodyParser.json()); 

// Define a route to fetch user data based on account number and PIN
app.post('/api/fetch-user', (req, res) => {
    const { userAccountNo, userAccountPin } = req.body;

    db.fetchUserPassword(userAccountNo, userAccountPin, (err, customerId, customerName, customerBalance) => {
        if (err) {
            return res.status(500).send('Error querying the database');
        }
        if (customerName === "User does not exist") {
            return res.status(404).send('User does not exist');
        }
        res.json({customerId, customerName, customerBalance });
    });
});

app.post('/api/fetch-notes', (req, res) => {
//THIS REQUEST DOES NOT CONTAIN A BODY. SO REQ.BODY IS OMMITTED.
    db.fetchNotes((err, cash_id, notes,count) => {
        if (err) {
            return res.status(500).send('Error querying the database');
        }
        if (cash_id === "Money does not exist") {
            return res.status(404).send('Money does not exist');
        }
        res.json({ cash_id, notes,count });
    });
});

app.post('/api/update-balance', (req, res) => {
    const { customerId, customerBalance } = req.body;
    db.updateUserBalance(customerId, customerBalance, (err, result) => {
        if (err) {
          return res.status(500).send('Error querying the database');
        }
        if (result === "User does not exist") {
          return res.status(404).send("User does not exist");
        }
        res.json({ customerId, customerBalance });
      });
});

app.post('/api/update-notes', (req, res) => {
    const { RMNotesId, RMNotesAvailable } = req.body;
    db.updateNoteCount(RMNotesId, RMNotesAvailable, (err, result) => {
        if (err) {
          return res.status(500).send('Error querying the database');
        }
        if (result === "Note does not exist") {
          return res.status(404).send("Note does not exist");
        }
        res.json({ RMNotesId, RMNotesAvailable });
      });
});
// Start the server
app.listen(3000, () => {
    console.log('Server is running on port 3000...');
});
