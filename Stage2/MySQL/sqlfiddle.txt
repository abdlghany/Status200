CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    surname VARCHAR(50),
    first_name VARCHAR(50),
    city VARCHAR(50),
    date_of_birth DATE,
    gender CHAR(1)
);

INSERT INTO customers (surname, first_name, city, date_of_birth, gender)
VALUES
('Smith', 'John', 'New York', '1985-04-12', 'M'),
('Johnson', 'Emma', 'Los Angeles', '1990-06-25', 'F'),
('Williams', 'Olivia', 'Chicago', '1988-09-15', 'F'),
('Jones', 'Noah', 'Houston', '1992-11-05', 'M'),
('Brown', 'Sophia', 'Phoenix', '1986-02-19', 'F'),
('Davis', 'Liam', 'Philadelphia', '1983-03-22', 'M'),
('Miller', 'Isabella', 'San Antonio', '1991-07-13', 'F'),
('Wilson', 'James', 'San Diego', '1989-10-30', 'M'),
('Moore', 'Mia', 'Dallas', '1993-01-14', 'F'),
('Taylor', 'Lucas', 'San Jose', '1984-08-27', 'M');

select customer_id, first_name, surname, city,date_of_birth,gender from customers where first_name='john';

select * from customers;

select DISTINCT city from customers;


select concat(first_name, ' ',surname,' lives in ', city, ' he/she was born in ',YEAR(date_of_birth)) as "Customer Information" from customers where city IN("new york", "chicago", "lion") and gender = 'F';

select count(*) as "Number of customers in Chicago" from customers where city = "chicago";

select count(*) as "Number of Females born after 1986", sum(date_of_birth) as "useless column" from customers where gender = "F" and YEAR(date_of_birth) > 1986;

SELECT `date_of_birth` as "Birth date" FROM `customers` WHERE `first_name` = "James" OR `first_name` = "Mia";

SELECT date_of_birth AS "Birth Date" FROM customers WHERE first_name IN ("MIA", "JAMES");

SELECT CONCAT(first_name, " ", surname) as Name,
city as Hometown,
year(date_of_birth) as "Year Born" 
FROM CUSTOMERS 
WHERE year(date_of_birth) BETWEEN 1985 AND 1995
AND city in("houston", "los angeles", "new york")
ORDER BY date_of_birth DESC;

SELECT count(*) as "Number of customers names Johnson" FROM CUSTOMERS where surname = 'Johnson';

select count(*) as "Female clients",
(SELECT COUNT(*) from customers where gender = "M") as "Male clients" 
from customers where gender = "F";

select count(*) as "number of people per gender", gender
from customers
group by gender;


select count(*) as "number of people per gender", gender
from customers
group by gender
having gender = "M";

select count(*) as "number of people per gender", gender
from customers 
where gender = "M"
group by gender;

select count(*) as "countgender", gender
from customers
group by gender
having countgender > 4 ;

select city, count(*) as "number of customers"
from customers
group by city
having "number of customers" < 3;

SELECT gender, year(date_of_birth) AS "Year of birth", COUNT(*) as Count
FROM customers
GROUP BY gender, year(date_of_birth)
HAVING Count > 1
ORDER BY year(date_of_birth), gender;

------------------------------------------------------------------------
-- Create the Products table
CREATE TABLE Products (
    prod_id INT AUTO_INCREMENT PRIMARY KEY,
    Prod_name VARCHAR(20),
    Prod_description VARCHAR(100),
    Stock INT,
    Unitprice DECIMAL(10,2),
    Prod_category VARCHAR(20),
    Last_Sold DATE,
    Added_To_Stock DATE
);

-- Insert 50 example records into the Products table
INSERT INTO Products (Prod_name, Prod_description, Stock, Unitprice, Prod_category, Last_Sold, Added_To_Stock)
VALUES
    ('Laptop', '15-inch display, 256GB SSD', 50, 999.99, 'Electronics', '2024-08-01', '2024-07-25'),
    ('Smartphone', '128GB storage, 12MP camera', 120, 699.99, 'Electronics', '2024-08-05', '2024-07-30'),
    ('Headphones', 'Noise-cancelling, Bluetooth', 200, 149.99, 'Electronics', '2024-08-02', '2024-07-28'),
    ('Keyboard', 'Mechanical, RGB backlight', 80, 89.99, 'Accessories', '2024-08-03', '2024-07-27'),
    ('Mouse', 'Wireless, ergonomic design', 150, 49.99, 'Accessories', '2024-08-01', '2024-07-26'),
    ('Monitor', '24-inch, Full HD', 60, 179.99, 'Electronics', '2024-08-04', '2024-07-29'),
    ('Printer', 'Laser, wireless', 40, 199.99, 'Electronics', '2024-08-06', '2024-07-31'),
    ('Tablet', '10-inch display, 64GB', 90, 329.99, 'Electronics', '2024-08-03', '2024-07-25'),
    ('Charger', 'Fast charging, USB-C', 300, 29.99, 'Accessories', '2024-08-02', '2024-07-30'),
    ('Camera', 'Mirrorless, 24MP', 30, 799.99, 'Electronics', '2024-08-07', '2024-07-28'),
    ('Smartwatch', 'Heart rate monitor, GPS', 100, 199.99, 'Electronics', '2024-08-01', '2024-07-26'),
    ('Speaker', 'Bluetooth, waterproof', 70, 99.99, 'Electronics', '2024-08-05', '2024-07-27'),
    ('Router', 'Dual-band, Gigabit', 110, 59.99, 'Electronics', '2024-08-03', '2024-07-29'),
    ('Flash Drive', '64GB, USB 3.0', 500, 19.99, 'Accessories', '2024-08-04', '2024-07-30'),
    ('External HDD', '1TB, USB 3.0', 45, 79.99, 'Accessories', '2024-08-06', '2024-07-31'),
    ('Gaming Console', 'Next-gen, 512GB SSD', 25, 499.99, 'Electronics', '2024-08-02', '2024-07-25'),
    ('TV', '50-inch, 4K UHD', 35, 599.99, 'Electronics', '2024-08-01', '2024-07-26'),
    ('VR Headset', 'Immersive experience', 20, 299.99, 'Electronics', '2024-08-07', '2024-07-28'),
    ('Drone', '4K camera, GPS', 15, 899.99, 'Electronics', '2024-08-04', '2024-07-29'),
    ('Power Bank', '20000mAh, USB-C', 250, 39.99, 'Accessories', '2024-08-03', '2024-07-30'),
    ('Microphone', 'USB, studio quality', 55, 129.99, 'Accessories', '2024-08-02', '2024-07-31'),
    ('Webcam', '1080p, Autofocus', 75, 59.99, 'Accessories', '2024-08-01', '2024-07-25'),
    ('Smart Thermostat', 'Wi-Fi, Voice control', 65, 149.99, 'Electronics', '2024-08-06', '2024-07-26'),
    ('E-Reader', '6-inch, 8GB', 90, 129.99, 'Electronics', '2024-08-03', '2024-07-27'),
    ('Action Camera', '4K, waterproof', 35, 249.99, 'Electronics', '2024-08-07', '2024-07-28'),
    ('Security Camera', 'Wi-Fi, night vision', 120, 79.99, 'Electronics', '2024-08-05', '2024-07-29'),
    ('Projector', '1080p, Portable', 25, 399.99, 'Electronics', '2024-08-04', '2024-07-30'),
    ('Smart Light', 'Wi-Fi, RGB', 200, 29.99, 'Accessories', '2024-08-01', '2024-07-31'),
    ('Electric Kettle', '1.7L, Stainless Steel', 150, 49.99, 'Home', '2024-08-02', '2024-07-25'),
    ('Blender', '600W, 1.5L', 100, 89.99, 'Home', '2024-08-06', '2024-07-26'),
    ('Air Purifier', 'HEPA filter, 300 sq.ft.', 40, 199.99, 'Home', '2024-08-03', '2024-07-27'),
    ('Robot Vacuum', 'Wi-Fi, Self-charging', 60, 299.99, 'Home', '2024-08-05', '2024-07-28'),
    ('Electric Toothbrush', 'Rechargeable, 2 heads', 200, 39.99, 'Personal', '2024-08-01', '2024-07-29'),
    ('Hair Dryer', 'Ionic, 1875W', 90, 69.99, 'Personal', '2024-08-04', '2024-07-30'),
    ('Shaver', 'Electric, cordless', 120, 49.99, 'Personal', '2024-08-07', '2024-07-31'),
    ('Yoga Mat', '6mm, non-slip', 180, 19.99, 'Fitness', '2024-08-02', '2024-07-25'),
    ('Dumbbells', 'Adjustable, 20kg', 70, 99.99, 'Fitness', '2024-08-03', '2024-07-26'),
    ('Treadmill', 'Foldable, LCD display', 15, 499.99, 'Fitness', '2024-08-01', '2024-07-27'),
    ('Exercise Bike', 'Magnetic resistance', 20, 399.99, 'Fitness', '2024-08-05', '2024-07-28'),
    ('Jump Rope', 'Speed rope, adjustable', 250, 14.99, 'Fitness', '2024-08-06', '2024-07-29'),
    ('Resistance Bands', 'Set of 5, various strengths', 300, 24.99, 'Fitness', '2024-08-04', '2024-07-30'),
    ('Bicycle', 'Mountain bike, 21-speed', 30, 499.99, 'Fitness', '2024-08-07', '2024-07-31'),
    ('Helmet', 'Bicycle, adjustable size', 150, 49.99, 'Accessories', '2024-08-02', '2024-07-25'),
    ('Backpack', 'Water-resistant, 25L', 200, 59.99, 'Accessories', '2024-08-03', '2024-07-26'),
    ('Sleeping Bag', '3-season, compact', 75, 79.99, 'Outdoor', '2024-08-01', '2024-07-27'),
    ('Tent', '2-person, waterproof', 40, 129.99, 'Outdoor', '2024-08-05', '2024-07-28'),
    ('Camping Stove', 'Portable, propane', 60, 59.99, 'Outdoor', '2024-08-06', '2024-07-29'),
    ('Hiking Boots', 'Waterproof, high ankle', 100, 149.99, 'Outdoor', '2024-08-04', '2024-07-30'),
    ('Flashlight', 'LED, rechargeable', 150, 29.99, 'Outdoor', '2024-08-07', '2024-07-31');



select Prod_name as "Product Name" , Unitprice as "Unit Price" , Prod_description as "Product Description"
from products
where Last_Sold > "2024-07-15" and stock >= 50;

select sum(stock*unitprice) as "Value of all product in stock"
from products;

select Prod_category as "Category" , sum(stock) as "in stock"
from products
group by Prod_category
having sum(stock) > 600;

select prod_name as "Product Name", count(*) as "Sold count" from products 
where last_sold <= date(now()) and last_sold > date_add(now(), INTERVAL -1 MONTH)
group by prod_name 
having prod_name like "%camera%";
"%ca_era%"; // will also work
select * from products 
where added_to_stock < "2024-07-28" 
AND unitprice BETWEEN 299.99 and 499.99;



----------------------------------------
DAY 2
----------------------------------------

-- Create tables

CREATE TABLE customer (
    cust_id INT AUTO_INCREMENT PRIMARY KEY,
    cust_name VARCHAR(100),
    cust_city VARCHAR(100),
    cust_country VARCHAR(100)
);

CREATE TABLE product (
    prod_id INT AUTO_INCREMENT PRIMARY KEY,
    prod_name VARCHAR(100),
    unit_price DECIMAL(10, 2)
);

CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    cust_id INT,
    voucher DECIMAL(5, 2),
    shipper_id INT,
    FOREIGN KEY (cust_id) REFERENCES customer(cust_id)
);

CREATE TABLE orderdetail (
    order_id INT,
    prod_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    PRIMARY KEY (order_id, prod_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (prod_id) REFERENCES product(prod_id)
);

-- Insert data into customer table

INSERT INTO customer (cust_name, cust_city, cust_country) VALUES
('Alice Johnson', 'New York', 'USA'),
('Bob Smith', 'Los Angeles', 'USA'),
('Carlos Gonzalez', 'Mexico City', 'Mexico'),
('Diana Prince', 'London', 'UK'),
('Eva Green', 'Paris', 'France'),
('Frank Castle', 'Berlin', 'Germany'),
('Grace Kelly', 'Rome', 'Italy'),
('Hank Schrader', 'Madrid', 'Spain'),
('Irene Adler', 'Amsterdam', 'Netherlands'),
('Jack Reacher', 'Sydney', 'Australia'),
('Katherine Heigl', 'Toronto', 'Canada'),
('Leo Messi', 'Buenos Aires', 'Argentina'),
('Mia Farrow', 'Rio de Janeiro', 'Brazil'),
('Nina Simone', 'Johannesburg', 'South Africa'),
('Oscar Wilde', 'Dublin', 'Ireland'),
('Paul Atreides', 'Vienna', 'Austria'),
('Quinn Fabray', 'Brussels', 'Belgium'),
('Ralph Fiennes', 'Zurich', 'Switzerland'),
('Sandra Bullock', 'Singapore', 'Singapore'),
('Tom Hardy', 'Hong Kong', 'China');

-- Insert data into product table

INSERT INTO product (prod_name, unit_price) VALUES
('Laptop', 999.99),
('Smartphone', 499.99),
('Headphones', 79.99),
('Keyboard', 49.99),
('Mouse', 29.99),
('Monitor', 199.99),
('Printer', 149.99),
('Webcam', 89.99),
('Smartwatch', 129.99),
('External Hard Drive', 119.99),
('USB Flash Drive', 19.99),
('Router', 89.99),
('Speakers', 149.99),
('Desk Chair', 229.99),
('Desk Lamp', 59.99),
('Tablet', 349.99),
('Smart TV', 699.99),
('Digital Camera', 499.99),
('Fitness Tracker', 89.99),
('Bluetooth Speaker', 59.99);

-- Insert data into orders table

INSERT INTO orders (order_date, cust_id, voucher, shipper_id) VALUES
('2024-08-01', 1, 10.00, 1),
('2024-08-02', 2, 5.00, 2),
('2024-08-03', 3, 15.00, 1),
('2024-08-04', 4, 20.00, 3),
('2024-08-05', 5, 10.00, 2),
('2024-08-06', 6, 5.00, 1),
('2024-08-07', 7, 25.00, 3),
('2024-08-08', 8, 30.00, 2),
('2024-08-09', 9, 10.00, 1),
('2024-08-10', 10, 15.00, 3),
('2024-08-11', 11, 20.00, 2),
('2024-08-12', 12, 5.00, 1),
('2024-08-13', 13, 25.00, 3),
('2024-08-14', 14, 30.00, 2),
('2024-08-15', 15, 10.00, 1),
('2024-08-16', 16, 15.00, 3),
('2024-08-17', 17, 20.00, 2),
('2024-08-18', 18, 5.00, 1),
('2024-08-19', 19, 25.00, 3),
('2024-08-20', 20, 30.00, 2);

-- Insert data into orderdetail table

INSERT INTO orderdetail (order_id, prod_id, quantity, price) VALUES
(1, 1, 1, 999.99),
(1, 2, 2, 499.99),
(2, 3, 1, 79.99),
(2, 4, 1, 49.99),
(3, 5, 3, 29.99),
(3, 6, 2, 199.99),
(4, 7, 1, 149.99),
(4, 8, 1, 89.99),
(5, 9, 2, 129.99),
(5, 10, 1, 119.99),
(6, 11, 3, 19.99),
(6, 12, 1, 89.99),
(7, 13, 2, 149.99),
(7, 14, 1, 229.99),
(8, 15, 1, 59.99),
(8, 16, 1, 349.99),
(9, 17, 1, 699.99),
(9, 18, 1, 499.99),
(10, 19, 1, 89.99),
(10, 20, 2, 59.99),
(11, 1, 1, 999.99),
(11, 2, 1, 499.99),
(12, 3, 2, 79.99),
(12, 4, 1, 49.99),
(13, 5, 1, 29.99),
(13, 6, 1, 199.99),
(14, 7, 1, 149.99),
(14, 8, 2, 89.99),
(15, 9, 1, 129.99),
(15, 10, 3, 119.99),
(16, 11, 2, 19.99),
(16, 12, 1, 89.99),
(17, 13, 3, 149.99),
(17, 14, 1, 229.99),
(18, 15, 1, 59.99),
(18, 16, 1, 349.99),
(19, 17, 1, 699.99),
(19, 18, 2, 499.99),
(20, 19, 1, 89.99),
(20, 20, 1, 59.99);


SELECT customer.cust_name AS "Customer Name", 
product.prod_name AS "Product Name",
orderdetail.price AS "Price at the time of the sale",
-- product.unit_price as "Unit Original Price", 
orderdetail.quantity AS Quantity, 
orderdetail.price * orderdetail.quantity AS "Total Price" 
from customer 
JOIN orders ON customer.cust_id = orders.cust_id
JOIN orderdetail ON orders.order_id = orderdetail.order_id
JOIN product ON orderdetail.prod_id = product.prod_id
WHERE orderdetail.quantity > 1
ORDER BY orderdetail.quantity DESC;


SELECT product.prod_name AS "Product Name",
sum(orderdetail.quantity) AS Quantity
from product
join orderdetail ON product.prod_id = orderdetail.prod_id
WHERE orderdetail.quantity >= 2
group by product.prod_id
having Quantity >4
order by Quantity DESC;


-- ------------------------------------------------------------
-- List all orders with a total order value.
select orders.order_id as "Order ID", orders.order_date as "Order Date", orders.cust_id as "Customer ID",
orders.voucher as Voucher, orders.shipper_id as "Shipper ID", sum(orderdetail.price * orderdetail.quantity) as "Order Total Value",
sum(orderdetail.price * orderdetail.quantity * (1-orders.voucher/100)) as "Order Total Value With voucher"
from orders join orderdetail on orders.order_id = orderdetail.order_id
GROUP by orders.order_id;

-- products that have been ordered at least twice
select product.prod_id as "Product ID", product.prod_name as "Product Name" , product.unit_price as "Unit Price", sum(orderdetail.quantity) as "Total Quantity Ordered",
count(DISTINCT orderdetail.order_id) as "No. of orders"
from product join orderdetail on product.prod_id = orderdetail.prod_id
group by product.prod_id
having count(DISTINCT orderdetail.order_id) > 1
order by product.prod_id;

-- poducts with over a $200 value that have been ordered in Amsterdam or Rome
select product.prod_id as "Product ID", product.prod_name as "Product Name", orderdetail.price as "Unit Ordered Price", customer.cust_city as "City Sold in"
from product join orderdetail on product.prod_id = orderdetail.prod_id
join orders on orderdetail.order_id = orders.order_id
join customer on orders.cust_id = customer.cust_id
where customer.cust_city IN ("Amsterdam", "Rome") and product.unit_price > 200;

-- Number of Sales by country
select customer.cust_country as Country, sum(orderdetail.quantity) as "Number of Sales"
from customer join orders on orders.cust_id = customer.cust_id
join orderdetail on orderdetail.order_id = orders.order_id
group by customer.cust_country
order by sum(orderdetail.quantity) DESC;
-- Number of Orders by country
select customer.cust_country as Country, count(orders.order_id) as "Number of Orders"
from customer join orders on orders.cust_id = customer.cust_id
group by customer.cust_country;

-- total value of orders per city (over $1000)
select customer.cust_city as City, sum(orderdetail.quantity * orderdetail.price ) as "Total Value of orders over 1000 (discounted)"
from orderdetail join orders on orderdetail.order_id = orders.order_id
join customer on orders.cust_id = customer.cust_id
group by customer.cust_city
having  sum(orderdetail.quantity * orderdetail.price) > 1000
order by sum(orderdetail.quantity * orderdetail.price ) DESC;


-- list products (id, name) that haven't been sold in the last year.
select  DISTINCT product.prod_id as "Product ID", product.prod_name as "Product Name", orders.order_date as "Order Date"
from product left join orderdetail on product.prod_id = orderdetail.prod_id
join orders on orderdetail.order_id = orders.order_id
where orders.order_date < adddate(now(), INTERVAL -1 YEAR) OR orders.order_id is NULL;


-- list all customers in rome or berlin that didnt order.
select customer.cust_name as "customer name", customer.cust_id as "customer id", customer.cust_city as "customer city" 
from customer left join orders on orders.cust_id = customer.cust_id 
where order_id is null AND customer.cust_city in ("Rome", "Berlin");


-- count the number of products with the term "web" that haven't been ordered.ALTER
select count(product.prod_id) as "COUNT OF PRODUCTS THAT HAVEN'T BEEN ORDERED AND HAVE WEB IN THEIR NAMES" from product left join orderdetail on orderdetail.prod_id = product.prod_id 
where orderdetail.prod_id is NULL AND product.prod_name LIKE "%web%";




-- ------------------------------------------------------------
-- orders (order_id, order_date, cust_id, voucher, shipper_id)
insert into orders values (NULL,date(now()), 6, 10.00,2 );


-- orderdetail (order_id, prod_id, quantity, price)
insert into orderdetail values (21,10,5,119.99);
insert into orderdetail values (21,12,6, 89.99);

select customer.cust_name, orders.order_id, orders.order_date, orderdetail.quantity, product.prod_name, orderdetail.price
from customer
join orders on orders.cust_id = customer.cust_id
join orderdetail on orders.order_id = orderdetail.order_id
join product on orderdetail.prod_id = product.prod_id
having orders.order_id = 21;


select customer.cust_name, orders.order_id, orders.order_date, sum(orderdetail.price * (1-orders.voucher/100)) as "Total Price"
from customer
join orders on orders.cust_id = customer.cust_id
join orderdetail on orders.order_id = orderdetail.order_id
join product on orderdetail.prod_id = product.prod_id
group by customer.cust_name, orders.order_id, orders.order_date
having orders.order_id = 21;




-- COLUMN NAMES:
-- orderdetail (order_id, prod_id, quantity, price)
-- orders (order_id, order_date, cust_id, voucher, shipper_id)
-- product (prod_id, prod_name, unit_price)
-- customer (cust_id, cust_name, cust_city, cust_country)



